package dcs

import (
	"encoding/json"
	"log"

	"github.com/safedep/gateway/services/gen"
	"github.com/safedep/gateway/services/pkg/common/config"
	"github.com/safedep/gateway/services/pkg/common/db"
	"github.com/safedep/gateway/services/pkg/common/db/models"
	common_models "github.com/safedep/gateway/services/pkg/common/models"
	"github.com/safedep/gateway/services/pkg/common/openssf"
	"github.com/safedep/gateway/services/pkg/common/utils"
	"google.golang.org/protobuf/proto"
)

const (
	vulnCollectorGroupName = "vuln-collector-group"
	vulnCollectorName      = "Vulnerability Data Collector"
)

type vulnCollector struct {
	osvAdapter *openssf.OsvServiceAdapter
	repository *db.VulnerabilityRepository
}

func vulnCollectorSubscription(repository *db.VulnerabilityRepository) eventSubscription[*gen.TapArtefactRequestEvent] {
	osvAdapter := openssf.NewOsvServiceAdapter(openssf.DefaultServiceAdapterConfig())

	h := vulnCollector{osvAdapter: osvAdapter, repository: repository}
	return h.subscription()
}

func (v *vulnCollector) subscription() eventSubscription[*gen.TapArtefactRequestEvent] {
	cfg := config.TapServiceConfig()

	return eventSubscription[*gen.TapArtefactRequestEvent]{
		name:  vulnCollectorName,
		group: vulnCollectorGroupName,
		topic: cfg.GetPublisherConfig().GetTopicNames().GetUpstreamRequest(),
		decoder: func(b []byte) (*gen.TapArtefactRequestEvent, error) {
			var event gen.TapArtefactRequestEvent
			err := proto.Unmarshal(b, &event)
			return &event, err
		},
		handler: v.handler(),
	}
}

func (v *vulnCollector) handler() eventSubscriptionHandler[*gen.TapArtefactRequestEvent] {
	return func(event *gen.TapArtefactRequestEvent) error {
		return v.handle(event)
	}
}

func (v *vulnCollector) handle(event *gen.TapArtefactRequestEvent) error {
	log.Printf("Vulnerability collector - Handling artefact: %v", event.Data)

	if config.IsFeatureDisabled("app_dcs_vulnerability_collector") {
		log.Printf("PDS Vulnerability collector is disabled with feature flag")
		return nil
	}

	artefact := common_models.Artefact{
		Source: common_models.ArtefactSource{
			Type: event.Data.Artefact.Ecosystem,
		},
		Group:   event.Data.Artefact.Group,
		Name:    event.Data.Artefact.Name,
		Version: event.Data.Artefact.Version,
	}

	vulnerabilities, err := v.osvAdapter.QueryPackage(artefact.OpenSsfEcosystem(),
		artefact.OpenSsfPackageName(), artefact.OpenSsfPackageVersion())
	if err != nil {
		log.Printf("Failed to fetch vulnerability from OSV adapter: %v", err)
		return err
	}

	vulns := utils.SafelyGetValue(vulnerabilities.Vulns)

	log.Printf("Fetched %d vulnerabilities for %s/%s", len(vulns),
		artefact.OpenSsfEcosystem(), artefact.OpenSsfPackageName())

	for _, entry := range vulns {
		dataBytes, err := json.Marshal(entry)
		if err != nil {
			log.Printf("Failed to serialize vulnerability entry to JSON")
			continue
		}

		err = v.repository.Upsert(models.Vulnerability{
			Ecosystem:       artefact.OpenSsfEcosystem(),
			Group:           artefact.Group,
			Name:            artefact.Name,
			SchemaType:      models.VulnerabilitySchemaTypeOpenSSF,
			SchemaVersion:   utils.SafelyGetValue(entry.SchemaVersion),
			ExternalId:      utils.SafelyGetValue(entry.Id),
			ExternalSource:  models.VulnerabilitySourceOpenSSF,
			Title:           utils.SafelyGetValue(entry.Summary),
			Description:     utils.SafelyGetValue(entry.Details),
			DataModifiedAt:  utils.SafelyGetValue(entry.Modified),
			DataPublishedAt: utils.SafelyGetValue(entry.Published),
			Data:            dataBytes,
		})

		if err != nil {
			log.Printf("Failed to upsert vulnerability into repository")
		}
	}

	return nil
}
